const fs = require('fs');
const path = require('path');
const { EmbedBuilder } = require('discord.js');

class SquadEmbedManager {
    constructor(discordClient) {
        this.client = discordClient;
        this.config = this.loadConfig();
        this.squadsData = this.loadSquadsData();
        this.playerVehiclesPath = path.join(__dirname, 'data', 'players', 'vehicle-record-auto.json');
        this.lastPlayerVehiclesHash = null;
        this.monitoringInterval = null;
        
        // Iniciar monitoramento cont√≠nuo
        this.startContinuousMonitoring();
    }

    // Normaliza o nome do ve√≠culo para exibi√ß√£o/agrupamento (remove sufixos e padroniza)
    normalizeVehicleDisplayName(rawName) {
        try {
            if (!rawName) return 'DESCONHECIDO';
            let s = String(rawName);
            s = s.replace('Vehicle:BPC_', '');
            s = s.replace(/^BPC_/i, '');
            s = s.replace(/_ES$/i, '');
            s = s.replace(/_/g, ' ');
            s = s.replace(/item\s*container/ig, '');
            s = s.replace(/\s+/g, ' ').trim();
            if (!s) return 'DESCONHECIDO';

            const normalizedLower = s.toLowerCase();
            const dictionary = {
                'wolfswagen': 'WolfsWagen',
                'rager': 'Rager',
                'laika': 'Laika',
                'cruiser': 'Cruiser',
                'dirtbike': 'Dirtbike',
                'tractor': 'Tractor',
                'kinglet mariner': 'Kinglet Mariner',
                'kinglet duster': 'Kinglet Duster',
                'ris': 'RIS'
            };
            if (dictionary[normalizedLower]) return dictionary[normalizedLower];

            const preserveUpper = new Set(['RIS']);
            return s.split(' ').map(word => {
                const upper = word.toUpperCase();
                if (preserveUpper.has(upper)) return upper;
                return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
            }).join(' ');
        } catch (_) {
            return String(rawName);
        }
    }

    loadConfig() {
        const configPath = path.join(__dirname, 'data', 'server', 'config.json');
        return JSON.parse(fs.readFileSync(configPath, 'utf8'));
    }

    loadSquadsData() {
        const squadsPath = path.join(__dirname, 'data', 'squad', 'squads.json');
        try {
            if (fs.existsSync(squadsPath)) {
                return JSON.parse(fs.readFileSync(squadsPath, 'utf8'));
            }
        } catch (error) {
            console.error('Erro ao carregar dados dos squads:', error.message);
        }
        return { squads: {} };
    }

    saveSquadsData() {
        const squadsPath = path.join(__dirname, 'data', 'squad', 'squads.json');
        fs.writeFileSync(squadsPath, JSON.stringify(this.squadsData, null, 2));
    }

    // SISTEMA DE MONITORAMENTO CONT√çNUO
    startContinuousMonitoring() {
        console.log('üîÑ Iniciando monitoramento cont√≠nuo dos ve√≠culos...');
        
        // Verificar a cada 30 segundos se houve mudan√ßas no vehicle-record-auto.json
        this.monitoringInterval = setInterval(async () => {
            await this.checkForVehicleChanges();
        }, 30000); // 30 segundos
        
        console.log('‚úÖ Monitoramento cont√≠nuo iniciado (verifica√ß√£o a cada 30s)');
    }

    async checkForVehicleChanges() {
        try {
            console.log('üîç Verificando mudan√ßas nos ve√≠culos...');
            
            // Verificar se o arquivo vehicle-record-auto.json existe
            if (!fs.existsSync(this.playerVehiclesPath)) {
                console.log('‚ùå Arquivo vehicle-record-auto.json n√£o encontrado');
                return;
            }

            // Ler o arquivo atual
            const currentData = fs.readFileSync(this.playerVehiclesPath, 'utf8');
            const currentHash = this.generateHash(currentData);
            const currentTimestamp = fs.statSync(this.playerVehiclesPath).mtime.getTime();
            
            console.log(`üìä Hash atual: ${currentHash}`);
            console.log(`üìä Hash anterior: ${this.lastPlayerVehiclesHash}`);
            console.log(`üìä Timestamp atual: ${new Date(currentTimestamp).toISOString()}`);
            console.log(`üìä Timestamp anterior: ${this.lastFileTimestamp ? new Date(this.lastFileTimestamp).toISOString() : 'NENHUM'}`);

            // Se √© a primeira verifica√ß√£o, apenas salvar o hash
            if (this.lastPlayerVehiclesHash === null) {
                this.lastPlayerVehiclesHash = currentHash;
                this.lastFileTimestamp = currentTimestamp;
                console.log('üìã Hash inicial dos ve√≠culos salvo');
                
                // For√ßar atualiza√ß√£o inicial dos squads
                console.log('üîÑ For√ßando atualiza√ß√£o inicial dos squads...');
                await this.forceUpdateSquads();
                return;
            }

            // Verificar se houve mudan√ßas (hash ou timestamp)
            const hashChanged = currentHash !== this.lastPlayerVehiclesHash;
            const timestampChanged = currentTimestamp !== this.lastFileTimestamp;
            
            if (hashChanged || timestampChanged) {
                console.log('üîÑ Mudan√ßas detectadas no player_vehicles.json!');
                console.log(`üìä Hash mudou: ${hashChanged}`);
                console.log(`üìä Timestamp mudou: ${timestampChanged}`);
                console.log('üìä Atualizando embeds dos squads automaticamente...');
                
                // Atualizar hash e timestamp
                this.lastPlayerVehiclesHash = currentHash;
                this.lastFileTimestamp = currentTimestamp;
                
                // For√ßar atualiza√ß√£o dos squads
                await this.forceUpdateSquads();
                
            } else {
                console.log('‚úÖ Nenhuma mudan√ßa detectada nos ve√≠culos');
                
                // FOR√áAR ATUALIZA√á√ÉO MESMO SEM MUDAN√áAS (a cada 5 verifica√ß√µes)
                this.forceUpdateCounter = (this.forceUpdateCounter || 0) + 1;
                if (this.forceUpdateCounter >= 5) {
                    console.log('üîÑ For√ßando atualiza√ß√£o peri√≥dica dos squads...');
                    await this.forceUpdateSquads();
                    this.forceUpdateCounter = 0;
                }
            }

        } catch (error) {
            console.error('‚ùå Erro no monitoramento cont√≠nuo:', error.message);
        }
    }

    generateHash(data) {
        // Hash simples baseado no conte√∫do
        let hash = 0;
        for (let i = 0; i < data.length; i++) {
            const char = data.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32bit integer
        }
        return hash.toString();
    }

    async forceUpdateSquads() {
        try {
            console.log('üîÑ For√ßando atualiza√ß√£o dos squads...');
            
            // SEMPRE verificar mudan√ßas no player_vehicles.json antes de atualizar
            console.log('üîç Verificando mudan√ßas no vehicle-record-auto.json...');
            
            if (fs.existsSync(this.playerVehiclesPath)) {
                const currentData = fs.readFileSync(this.playerVehiclesPath, 'utf8');
                const currentHash = this.generateHash(currentData);
                const currentTimestamp = fs.statSync(this.playerVehiclesPath).mtime.getTime();
                
                console.log(`üìä Hash atual: ${currentHash}`);
                console.log(`üìä Hash anterior: ${this.lastPlayerVehiclesHash}`);
                
                // Atualizar hash e timestamp
                this.lastPlayerVehiclesHash = currentHash;
                this.lastFileTimestamp = currentTimestamp;
            }
            
            // Obter dados atualizados dos squads
            const SquadsManager = require('./squads');
            const squadsManager = new SquadsManager();
            const currentSquads = await squadsManager.getSquadsData();
            
            // Atualizar embeds
            await this.updateSquads(currentSquads);
            
            console.log('‚úÖ Squads atualizados automaticamente');
            
        } catch (error) {
            console.error('‚ùå Erro ao for√ßar atualiza√ß√£o dos squads:', error.message);
        }
    }

    stopContinuousMonitoring() {
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
            this.monitoringInterval = null;
            console.log('üõë Monitoramento cont√≠nuo parado');
        }
    }

    // M√©todo para parar completamente o SquadEmbedManager
    async stop() {
        this.stopContinuousMonitoring();
        console.log('üõë SquadEmbedManager parado');
    }

    // Fun√ß√£o para verificar se usu√°rio est√° vinculado ao Discord
    checkDiscordLink(steamId) {
        try {
            const linkedUsersPath = path.join(__dirname, 'data', 'bot', 'linked_users.json');
            if (!fs.existsSync(linkedUsersPath)) {
                return null;
            }
            
            const linkedUsers = JSON.parse(fs.readFileSync(linkedUsersPath, 'utf8'));
            
            // Procurar pelo Steam ID nos usu√°rios vinculados
            for (const [discordId, userData] of Object.entries(linkedUsers)) {
                if (userData.steam_id === steamId) {
                    return {
                        discordId: discordId,
                        linkedAt: userData.linked_at,
                        permissions: userData.permissions || []
                    };
                }
            }
            
            return null;
        } catch (error) {
            console.error('Erro ao verificar usu√°rio vinculado:', error.message);
            return null;
        }
    }

    // Fun√ß√£o para buscar ve√≠culos dos jogadores do squad
    getSquadVehicles(squad) {
        try {
            const playerVehiclesPath = path.join(__dirname, 'data', 'players', 'vehicle-record-auto.json');
            if (!fs.existsSync(playerVehiclesPath)) {
                console.log('‚ùå Arquivo vehicle-record-auto.json n√£o encontrado');
                return {};
            }
            
            const playerVehicles = JSON.parse(fs.readFileSync(playerVehiclesPath, 'utf8'));
            const squadVehicles = {};
            
            console.log(`üîç Verificando ve√≠culos para squad: ${squad.name}`);
            console.log(`üë• Membros do squad: ${squad.members.length}`);
            
            // Para cada membro do squad
            squad.members.forEach(member => {
                const steamId = member.steam_id;
                console.log(`üîç Verificando membro: ${member.name} (${steamId})`);
                
                // Buscar ve√≠culos do jogador
                if (playerVehicles[steamId] && playerVehicles[steamId].activeVehicles) {
                    console.log(`‚úÖ Jogador ${member.name} tem ${playerVehicles[steamId].activeVehicles.length} ve√≠culos`);
                    
                    playerVehicles[steamId].activeVehicles.forEach(vehicle => {
                        const prettyType = this.normalizeVehicleDisplayName(vehicle.vehicleType);
                        console.log(`üöó Ve√≠culo encontrado: ${prettyType} (ID: ${vehicle.vehicleId})`);
                        if (!squadVehicles[prettyType]) {
                            squadVehicles[prettyType] = 0;
                        }
                        squadVehicles[prettyType]++;
                    });
                } else {
                    console.log(`‚ùå Jogador ${member.name} n√£o tem ve√≠culos registrados`);
                }
            });
            
            console.log(`üìä Ve√≠culos do squad ${squad.name}:`, squadVehicles);
            return squadVehicles;
        } catch (error) {
            console.error('‚ùå Erro ao buscar ve√≠culos do squad:', error.message);
            return {};
        }
    }

    createSquadEmbed(squad) {
        const embed = new EmbedBuilder()
            .setTitle(`üèÜ Squad: ${squad.name}`)
            .setColor(0x00ff88)
            .addFields(
                {
                    name: 'üë• Membros',
                    value: `${squad.members.length}/${squad.member_limit || '‚àû'}`,
                    inline: true
                },
                {
                    name: 'üèÜ Score',
                    value: squad.score ? squad.score.toFixed(0) : '0',
                    inline: true
                }
            )
            .setTimestamp();

        // Adicionar informa√ß√µes do squad se houver
        if (squad.message) {
            embed.addFields({
                name: 'üí¨ Mensagem',
                value: squad.message.length > 1024 ? squad.message.substring(0, 1021) + '...' : squad.message,
                inline: false
            });
        }

        if (squad.information) {
            embed.addFields({
                name: '‚ÑπÔ∏è Informa√ß√µes',
                value: squad.information.length > 1024 ? squad.information.substring(0, 1021) + '...' : squad.information,
                inline: false
            });
        }

        // Adicionar lista de membros se houver
        if (squad.members.length > 0) {
            const memberList = squad.members
                .sort((a, b) => b.rank - a.rank) // Ordenar por rank (maior primeiro)
                .map(member => {
                    const rankEmoji = member.rank === 1 ? 'üëë' : member.rank === 2 ? '‚öîÔ∏è' : 'üõ°Ô∏è';
                    
                    // Verificar se usu√°rio est√° vinculado ao Discord
                    const discordLink = this.checkDiscordLink(member.steam_id);
                    const discordInfo = discordLink ? `‚úÖ (<@${discordLink.discordId}>)` : `‚ùå`;
                    
                    return `${rankEmoji} ${member.name} (Rank: ${member.rank}) - Discord: ${discordInfo}`;
                })
                .join('\n');
            
            embed.addFields({
                name: 'üìã Lista de Membros',
                value: memberList.length > 1024 ? memberList.substring(0, 1021) + '...' : memberList,
                inline: false
            });
        }

        // Adicionar ve√≠culos do squad
        const squadVehicles = this.getSquadVehicles(squad);
        if (Object.keys(squadVehicles).length > 0) {
            const vehicleList = Object.entries(squadVehicles)
                .map(([type, count], index) => `${index + 1} - ${type} (${count})`)
                .join('\n');
            
            embed.addFields({
                name: 'üöó Ve√≠culos do Squad',
                value: vehicleList,
                inline: false
            });
        } else {
            embed.addFields({
                name: 'üöó Ve√≠culos do Squad',
                value: 'Nenhum ve√≠culo registrado',
                inline: false
            });
        }

        return embed;
    }

    async getSquadsChannel() {
        // Aguardar at√© que o bot esteja pronto
        let attempts = 0;
        const maxAttempts = 10;
        
        while (attempts < maxAttempts) {
            try {
                const guild = this.client.guilds.cache.get(this.config.discord_bot.guild_id);
                if (!guild) {
                    console.log(`Tentativa ${attempts + 1}: Aguardando bot conectar...`);
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    attempts++;
                    continue;
                }

                const channelId = this.config.discord_bot.channels.squads;
                const channel = guild.channels.cache.get(channelId);
                
                if (!channel) {
                    throw new Error(`Canal de squads n√£o encontrado: ${channelId}`);
                }

                console.log(`‚úÖ Bot conectado ao servidor: ${guild.name}`);
                console.log(`‚úÖ Canal encontrado: ${channel.name}`);
                return channel;
            } catch (error) {
                console.log(`Tentativa ${attempts + 1}: ${error.message}`);
                await new Promise(resolve => setTimeout(resolve, 1000));
                attempts++;
            }
        }
        
        throw new Error('Bot n√£o conseguiu conectar ao servidor Discord ap√≥s v√°rias tentativas');
    }

    async updateSquadEmbed(squad, messageId = null) {
        try {
            console.log(`üîÑ Atualizando embed do squad: ${squad.name}`);
            const channel = await this.getSquadsChannel();
            const embed = this.createSquadEmbed(squad);
            
            console.log(`üìä Embed criado para ${squad.name}:`, {
                title: embed.data.title,
                fields: embed.data.fields?.length || 0,
                hasVehicles: embed.data.fields?.some(f => f.name === 'üöó Ve√≠culos do Squad' && f.value !== 'Nenhum ve√≠culo registrado')
            });
            
            if (messageId) {
                // Editar embed existente
                console.log(`üìù Editando mensagem existente: ${messageId}`);
                const message = await channel.messages.fetch(messageId);
                await message.edit({ embeds: [embed] });
                console.log(`‚úÖ Embed do squad ${squad.name} atualizado com sucesso`);
            } else {
                // Criar novo embed
                console.log(`üìù Criando nova mensagem`);
                const message = await channel.send({ embeds: [embed] });
                console.log(`‚úÖ Novo embed criado para squad ${squad.name} com ID: ${message.id}`);
                return message.id; // Retornar ID para salvar
            }
        } catch (error) {
            console.error(`‚ùå Erro ao atualizar embed do squad ${squad.name}:`, error.message);
            
            // Tentar enviar mesmo com erro (for√ßar envio)
            try {
                console.log(`üîÑ Tentando envio for√ßado para ${squad.name}...`);
                const channel = await this.getSquadsChannel();
                const embed = this.createSquadEmbed(squad);
                const message = await channel.send({ embeds: [embed] });
                console.log(`‚úÖ Embed do squad ${squad.name} enviado com sucesso (for√ßado)`);
                return message.id;
            } catch (forceError) {
                console.error(`‚ùå Erro for√ßado ao enviar embed do squad ${squad.name}:`, forceError.message);
                // Retornar ID mock em caso de erro
                if (!messageId) {
                    return `mock_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                }
            }
        }
    }

    async deleteSquadEmbed(messageId) {
        try {
            const channel = await this.getSquadsChannel();
            const message = await channel.messages.fetch(messageId);
            await message.delete();
            console.log(`üóëÔ∏è Embed do squad removido`);
        } catch (error) {
            console.error('‚ùå Erro ao deletar embed do squad:', error.message);
        }
    }

    async initializeSquads(squads) {
        console.log('üèÜ Inicializando embeds dos squads...');
        
        // Primeiro, tentar buscar mensagens existentes no canal
        const existingMessages = await this.getExistingSquadMessages();
        
        console.log(`üìã Total de squads para inicializar: ${Object.keys(squads).length}`);
        
        for (const [squadId, squad] of Object.entries(squads)) {
            try {
                console.log(`üîÑ Inicializando squad: ${squad.name} (ID: ${squadId})`);
                
                // Tentar encontrar mensagem existente para este squad
                const existingMessageId = this.findExistingMessageForSquad(squad, existingMessages);
                console.log(`üìù MessageId existente para ${squad.name}: ${existingMessageId || 'NENHUM'}`);
                
                const messageId = await this.updateSquadEmbed(squad, existingMessageId);
                
                // Salvar ID da mensagem
                this.squadsData.squads[squadId] = {
                    ...squad,
                    embed_message_id: messageId,
                    last_updated: new Date().toISOString()
                };
                
                console.log(`‚úÖ Squad ${squad.name} ${existingMessageId ? 'atualizado' : 'inicializado'} com ID: ${messageId}`);
            } catch (error) {
                console.error(`‚ùå Erro ao inicializar squad ${squad.name}:`, error.message);
            }
        }
        
        this.saveSquadsData();
        console.log('‚úÖ Todos os squads inicializados!');
    }

    async updateSquads(squads) {
        console.log('üîÑ Atualizando embeds dos squads...');
        
        const oldSquads = this.squadsData.squads;
        let hasChanges = false;

        // SEMPRE verificar mudan√ßas no vehicle-record-auto.json antes de atualizar
        console.log('üîç Verificando mudan√ßas no vehicle-record-auto.json...');
        let playerVehiclesChanged = false;
        
        if (fs.existsSync(this.playerVehiclesPath)) {
            const currentData = fs.readFileSync(this.playerVehiclesPath, 'utf8');
            const currentHash = this.generateHash(currentData);
            const currentTimestamp = fs.statSync(this.playerVehiclesPath).mtime.getTime();
            
            console.log(`üìä Hash atual: ${currentHash}`);
            console.log(`üìä Hash anterior: ${this.lastPlayerVehiclesHash}`);
            
            // Verificar se houve mudan√ßas
            if (this.lastPlayerVehiclesHash && currentHash !== this.lastPlayerVehiclesHash) {
                console.log('üîÑ Mudan√ßas detectadas no vehicle-record-auto.json!');
                console.log(`üîç Hash anterior: ${this.lastPlayerVehiclesHash}`);
                console.log(`üîç Hash atual: ${currentHash}`);
                playerVehiclesChanged = true;
            } else {
                console.log(`üîç Nenhuma mudan√ßa detectada no vehicle-record-auto.json`);
                console.log(`üîç Hash anterior: ${this.lastPlayerVehiclesHash}`);
                console.log(`üîç Hash atual: ${currentHash}`);
            }
            
            // Atualizar hash e timestamp
            this.lastPlayerVehiclesHash = currentHash;
            this.lastFileTimestamp = currentTimestamp;
        }

        // Primeiro, buscar mensagens existentes no canal
        const existingMessages = await this.getExistingSquadMessages();

        // Verificar squads modificados ou novos
        for (const [squadId, newSquad] of Object.entries(squads)) {
            const oldSquad = oldSquads[squadId];
            
            console.log(`üîç Verificando squad: ${newSquad.name} (ID: ${squadId})`);
            console.log(`üìä Squad antigo existe: ${!!oldSquad}`);
            
            // SEMPRE atualizar se houve mudan√ßas no vehicle-record-auto.json
            let shouldUpdate = this.hasSquadChanged(oldSquad, newSquad) || playerVehiclesChanged;
            
            // FOR√áAR atualiza√ß√£o se houve mudan√ßas nos ve√≠culos
            if (playerVehiclesChanged) {
                console.log(`üöó FOR√áANDO atualiza√ß√£o do embed devido a mudan√ßas nos ve√≠culos`);
                shouldUpdate = true;
            }
            
            // SEMPRE atualizar se √© um squad novo ou se houve mudan√ßas nos ve√≠culos
            if (!oldSquad || playerVehiclesChanged) {
                shouldUpdate = true;
            }
            
            if (shouldUpdate) {
                console.log(`üîÑ Squad ${newSquad.name} ${playerVehiclesChanged ? 'atualizando devido a mudan√ßas nos ve√≠culos' : 'modificado'}, atualizando...`);

                // Preferir EDITAR o embed existente mesmo quando ve√≠culos mudaram; recriar s√≥ se falhar
                let messageId = oldSquad?.embed_message_id;
                if (!messageId) {
                    messageId = this.findExistingMessageForSquad(newSquad, existingMessages);
                }

                try {
                    console.log(`üìù ${messageId ? 'Editando' : 'Criando'} embed para ${newSquad.name}`);
                    const maybeNewId = await this.updateSquadEmbed(newSquad, messageId);
                    const effectiveId = messageId || maybeNewId || null;

                    this.squadsData.squads[squadId] = {
                        ...newSquad,
                        embed_message_id: effectiveId,
                        last_updated: new Date().toISOString()
                    };
                    hasChanges = true;
                } catch (editError) {
                    console.log(`‚ö†Ô∏è Falha ao editar embed (${editError.message}). Tentando recriar...`);
                    try {
                        // Tentar deletar antigo se existir
                        if (messageId) {
                            try { await this.deleteSquadEmbed(messageId); } catch (_) {}
                        }
                        const newMessageId = await this.updateSquadEmbed(newSquad, null);
                        this.squadsData.squads[squadId] = {
                            ...newSquad,
                            embed_message_id: newMessageId,
                            last_updated: new Date().toISOString()
                        };
                        hasChanges = true;
                    } catch (createError) {
                        console.log(`‚ùå Falha ao recriar embed: ${createError.message}`);
                    }
                }
            } else {
                console.log(`‚úÖ Squad ${newSquad.name} n√£o modificado, pulando...`);
            }
        }

        // Verificar squads removidos
        for (const [squadId, oldSquad] of Object.entries(oldSquads)) {
            if (!squads[squadId]) {
                console.log(`üóëÔ∏è Squad ${oldSquad.name} removido`);
                if (oldSquad.embed_message_id) {
                    await this.deleteSquadEmbed(oldSquad.embed_message_id);
                }
                delete this.squadsData.squads[squadId];
                hasChanges = true;
            }
        }

        // Salvar dados se houve mudan√ßas
        if (hasChanges) {
            this.saveSquadsData();
            console.log('üíæ Dados dos squads atualizados');
        }

        console.log('‚úÖ Atualiza√ß√£o dos squads conclu√≠da!');
    }

    async getExistingSquadMessages() {
        try {
            const channel = await this.getSquadsChannel();
            const messages = await channel.messages.fetch({ limit: 50 });
            
            // Filtrar apenas mensagens com embeds do nosso bot
            const squadMessages = messages.filter(msg => 
                msg.author.id === this.client.user.id && 
                msg.embeds.length > 0 &&
                msg.embeds[0].title && 
                msg.embeds[0].title.includes('Squad:')
            );
            
            console.log(`üìã Encontradas ${squadMessages.size} mensagens de squads existentes`);
            return squadMessages;
        } catch (error) {
            console.error('‚ùå Erro ao buscar mensagens existentes:', error.message);
            return new Map();
        }
    }
    
    findExistingMessageForSquad(squad, existingMessages) {
        for (const [messageId, message] of existingMessages) {
            const embed = message.embeds[0];
            if (embed && embed.title && embed.title.includes(`Squad: ${squad.name}`)) {
                console.log(`üîç Encontrada mensagem existente para ${squad.name}: ${messageId}`);
                return messageId;
            }
        }
        console.log(`üÜï Nenhuma mensagem existente encontrada para ${squad.name}`);
        return null;
    }
    
    hasSquadChanged(oldSquad, newSquad) {
        if (!oldSquad) return true;
        
        // Comparar nome
        if (oldSquad.name !== newSquad.name) return true;
        
        // Comparar informa√ß√µes b√°sicas
        if (oldSquad.message !== newSquad.message) return true;
        if (oldSquad.emblem !== newSquad.emblem) return true;
        if (oldSquad.information !== newSquad.information) return true;
        if (oldSquad.score !== newSquad.score) return true;
        if (oldSquad.member_limit !== newSquad.member_limit) return true;
        
        // Comparar membros
        if (oldSquad.members.length !== newSquad.members.length) return true;
        
        const oldMemberIds = oldSquad.members.map(m => m.user_profile_id).sort();
        const newMemberIds = newSquad.members.map(m => m.user_profile_id).sort();
        
        if (JSON.stringify(oldMemberIds) !== JSON.stringify(newMemberIds)) return true;
        
        // Comparar ve√≠culos do squad
        const oldVehicles = this.getSquadVehicles(oldSquad);
        const newVehicles = this.getSquadVehicles(newSquad);
        
        console.log(`üîç Comparando ve√≠culos para ${newSquad.name}:`);
        console.log(`   Antigo:`, oldVehicles);
        console.log(`   Novo:`, newVehicles);
        console.log(`   Mudou:`, JSON.stringify(oldVehicles) !== JSON.stringify(newVehicles));
        
        const vehiclesChanged = JSON.stringify(oldVehicles) !== JSON.stringify(newVehicles);
        console.log(`   Resultado final: ${vehiclesChanged}`);
        
        return vehiclesChanged;
    }
}

module.exports = SquadEmbedManager; 